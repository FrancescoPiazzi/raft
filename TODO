# STEP 1: pretend nothing will break
- [x] Create an Actum style state machine to describe a node
- [x] Leader election
- [x] Make lead duplicate messages and follow to listen and make their copies
- [x] Write client node to send messages to the leader
- [x] Followers tell client who the leader is if they recieve a message from a client
- [x] Make lead keep track of who received a certain update and commit it when a majority has it

**Completed when:**
- [x] The right leader is elected
- [x] Messages are received by the leader, duplicated, and committed


# STEP 2: prepare for stuff to break
- [x] Leader ping to check if it is alive, end of term and re-election if not
- [x] Implement resolutions for cases of lead-follow conflicts
- [x] Update client node to change server if instructed to do so because it sent a request to a non-leader
- [x] Update client node to change server to another random one if requests are timing out

**Completed when:**
- [x] Nodes are able to detect when the leader is dead and elect a new one
- [x] Follow can update their log to match the leader's
- [x] Client node can figure out who is the leader and send messages only to it
- [x] Client node changes server if the current one is not responding


# STEP 3: make stuff break
- [ ] figure out how to intercept messages and drop them
- [ ] kill random nodes and restart them some time later

completed when:
- [ ] the system can keep running as long as at least half the nodes are working, and leader doesn't do anything when there are exactly or fewer than half the nodes


# STEP 4: log compaction
- [ ] get each node to take snapshots of the committed state and discard old logs
- [ ] send snapshots to new nodes, and get the new nodes to catch up with the rest using them

completed when:
- [ ] each node can compact logs automatically
- [ ] nodes that are really far behind can still catch up


AT SOME POINT
- [x] use a more generic type for log entries
- [x] the maximum number of nodes is written in three different places but it must be the same in all of them, put them in a single place
- [x] struct to store follower state: match and next indexes, and message len queue